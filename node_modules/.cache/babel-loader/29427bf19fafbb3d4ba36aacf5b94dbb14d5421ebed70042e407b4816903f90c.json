{"ast":null,"code":"var _jsxFileName = \"/Users/sagisimchi/Documents/GitHub/dent2-client/src/components/document/components/EditableTextArea.tsx\",\n  _s = $RefreshSig$();\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport styled from \"styled-components\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { documentState } from \"../../../state/documentState\";\nimport { useParams } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditableInput = styled.textarea`\n  font-size: 12.21px;\n  border: ${_ref => {\n  let {\n    isEditing\n  } = _ref;\n  return isEditing ? \"1px solid var(--Input-BorderColor, #e6e6e6)\" : \"none\";\n}};\n  background: transparent;\n  outline: none;\n  width: 100%;\n  height: auto;\n  font-family: inherit;\n  resize: none;\n  &:focus {\n    outline: none;\n  }\n`;\n_c = EditableInput;\nfunction EditableTextArea(_ref2) {\n  _s();\n  let {\n    blockIndex,\n    isEditing,\n    handleBlur,\n    fieldName\n  } = _ref2;\n  const {\n    documentId\n  } = useParams();\n  const document = useRecoilValue(documentState(documentId));\n  const inputRef = useRef(null);\n  const {\n    control,\n    watch\n  } = useFormContext();\n  const [height, setHeight] = useState(14);\n  const fieldValue = watch(fieldName);\n  useEffect(() => {\n    if (inputRef.current) {\n      setHeight(inputRef.current.scrollHeight);\n    }\n  }, [fieldValue]);\n  useEffect(() => {\n    if (isEditing && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isEditing]);\n  return /*#__PURE__*/_jsxDEV(Controller, {\n    name: fieldName,\n    control: control,\n    render: _ref3 => {\n      let {\n        field\n      } = _ref3;\n      const value = typeof field.value === \"string\" || typeof field.value === \"number\" ? field.value : \"\";\n      return /*#__PURE__*/_jsxDEV(EditableInput, {\n        disabled: !isEditing,\n        isEditing: isEditing,\n        value: value,\n        onBlur: () => {\n          handleBlur && handleBlur(blockIndex);\n          field.onBlur();\n        },\n        onChange: field.onChange,\n        ref: inputRef,\n        style: {\n          height\n        },\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(EditableTextArea, \"wZXTWBQuPewjpQAAEoZBClLePOg=\", false, function () {\n  return [useParams, useRecoilValue, useFormContext];\n});\n_c2 = EditableTextArea;\nexport default EditableTextArea;\nvar _c, _c2;\n$RefreshReg$(_c, \"EditableInput\");\n$RefreshReg$(_c2, \"EditableTextArea\");","map":{"version":3,"names":["Controller","useFormContext","styled","React","useEffect","useRef","useState","useRecoilValue","documentState","useParams","jsxDEV","_jsxDEV","EditableInput","textarea","_ref","isEditing","_c","EditableTextArea","_ref2","_s","blockIndex","handleBlur","fieldName","documentId","document","inputRef","control","watch","height","setHeight","fieldValue","current","scrollHeight","focus","name","render","_ref3","field","value","disabled","onBlur","onChange","ref","style","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/sagisimchi/Documents/GitHub/dent2-client/src/components/document/components/EditableTextArea.tsx"],"sourcesContent":["import { Controller, Path, useFormContext } from \"react-hook-form\";\nimport styled from \"styled-components\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { documentState } from \"../../../state/documentState\";\nimport { useParams } from \"react-router\";\n\nimport { DocumentEntityType, DocumentEntity } from \"neword-core\";\n\nconst EditableInput = styled.textarea<{ isEditing: boolean }>`\n  font-size: 12.21px;\n  border: ${({ isEditing }) =>\n    isEditing ? \"1px solid var(--Input-BorderColor, #e6e6e6)\" : \"none\"};\n  background: transparent;\n  outline: none;\n  width: 100%;\n  height: auto;\n  font-family: inherit;\n  resize: none;\n  &:focus {\n    outline: none;\n  }\n`;\n\ninterface Props<T extends DocumentEntityType> {\n  isEditing: boolean;\n  blockIndex: number;\n  handleBlur?: (blockIndex: number) => void;\n  fieldName: Path<DocumentEntity<T>>;\n}\n\nfunction EditableTextArea<T extends DocumentEntityType>({\n  blockIndex,\n  isEditing,\n  handleBlur,\n  fieldName,\n}: Props<T>) {\n  const { documentId } = useParams<{ documentId: string }>();\n\n  const document = useRecoilValue(documentState(documentId as string));\n\n  const inputRef = useRef<HTMLTextAreaElement>(null);\n\n  const { control, watch } =\n    useFormContext<DocumentEntity<typeof document.type>>();\n\n  const [height, setHeight] = useState(14);\n\n  const fieldValue = watch(fieldName);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      setHeight(inputRef.current.scrollHeight);\n    }\n  }, [fieldValue]);\n\n  useEffect(() => {\n    if (isEditing && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isEditing]);\n\n  return (\n    <Controller\n      name={fieldName}\n      control={control}\n      render={({ field }) => {\n        const value =\n          typeof field.value === \"string\" || typeof field.value === \"number\"\n            ? field.value\n            : \"\";\n\n        return (\n          <EditableInput\n            disabled={!isEditing}\n            isEditing={isEditing}\n            value={value}\n            onBlur={() => {\n              handleBlur && handleBlur(blockIndex);\n              field.onBlur();\n            }}\n            onChange={field.onChange}\n            ref={inputRef}\n            style={{ height }}\n            autoFocus\n          />\n        );\n      }}\n    />\n  );\n}\n\nexport default EditableTextArea;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}