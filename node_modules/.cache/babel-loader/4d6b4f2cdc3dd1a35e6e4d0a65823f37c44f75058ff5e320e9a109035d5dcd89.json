{"ast":null,"code":"import { ServiceBase } from \"./service.base\";\nclass GeneratorService extends ServiceBase {\n  constructor() {\n    super(...arguments);\n    this.prefix = \"/generator\";\n  }\n  generateSuggestedKeywords(workerId) {\n    return this.get(`/${workerId}/keywords`);\n  }\n  generateKeywordsByWebsiteUrl(description, language) {\n    return this.get(`/keywords?description=${description}&language=${language}`);\n  }\n  generateTopics(data) {\n    return this.post(\"/topics\", data);\n  }\n  async regenerateArticleWidget(content, articleId) {\n    var _res$body;\n    //const stream = await this.post<Stream>(`/regenerate`, {}, true);\n    const res = await this.fetch(`/regenerate/${articleId}`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        content\n      })\n    });\n    const decoder = new TextDecoder();\n    const reader = res === null || res === void 0 ? void 0 : (_res$body = res.body) === null || _res$body === void 0 ? void 0 : _res$body.getReader();\n    while (true) {\n      const {\n        value,\n        done\n      } = await reader.read();\n      const decodedChunk = decoder.decode(value, {\n        stream: true\n      });\n      const event = new CustomEvent(\"stream\", {\n        detail: decodedChunk\n      });\n      document.dispatchEvent(event);\n      if (done) {\n        const event = new CustomEvent(\"end-stream\");\n        document.dispatchEvent(event);\n        break;\n      }\n    }\n  }\n}\nconst generatorService = new GeneratorService();\nexport default generatorService;","map":{"version":3,"names":["ServiceBase","GeneratorService","constructor","arguments","prefix","generateSuggestedKeywords","workerId","get","generateKeywordsByWebsiteUrl","description","language","generateTopics","data","post","regenerateArticleWidget","content","articleId","_res$body","res","fetch","method","body","JSON","stringify","decoder","TextDecoder","reader","getReader","value","done","read","decodedChunk","decode","stream","event","CustomEvent","detail","document","dispatchEvent","generatorService"],"sources":["/Users/sagisimchi/Documents/GitHub/dent2-client/src/core/services/generator.service.ts"],"sourcesContent":["import Stream from \"stream\";\nimport { ServiceBase } from \"./service.base\";\nimport axios from \"axios\";\nimport { Language } from \"../types/language\";\nimport { TriggerWorkerRequestData } from \"./requests/worker/triggerWorkerRequestData\";\n\nclass GeneratorService extends ServiceBase {\n  prefix = \"/generator\";\n\n  generateSuggestedKeywords(workerId: string) {\n    return this.get<string[]>(`/${workerId}/keywords`);\n  }\n\n  generateKeywordsByWebsiteUrl(description: string, language: Language) {\n    return this.get<string[]>(\n      `/keywords?description=${description}&language=${language}`\n    );\n  }\n\n  generateTopics(\n    data: Omit<\n      TriggerWorkerRequestData,\n      \"title\" | \"publishAsDraft\" | \"disablePublish\"\n    >\n  ) {\n    return this.post<string[]>(\"/topics\", data);\n  }\n\n  async regenerateArticleWidget(content: string, articleId: string) {\n    //const stream = await this.post<Stream>(`/regenerate`, {}, true);\n    const res = await this.fetch(`/regenerate/${articleId}`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        content,\n      }),\n    });\n\n    const decoder = new TextDecoder();\n    const reader = res?.body?.getReader() as any;\n\n    while (true) {\n      const { value, done } = await reader.read();\n      const decodedChunk = decoder.decode(value, { stream: true });\n\n      const event = new CustomEvent(\"stream\", {\n        detail: decodedChunk,\n      });\n\n      document.dispatchEvent(event);\n\n      if (done) {\n        const event = new CustomEvent(\"end-stream\");\n        document.dispatchEvent(event);\n        break;\n      }\n    }\n  }\n}\nconst generatorService = new GeneratorService();\nexport default generatorService;\n"],"mappings":"AACA,SAASA,WAAW,QAAQ,gBAAgB;AAK5C,MAAMC,gBAAgB,SAASD,WAAW,CAAC;EAAAE,YAAA;IAAA,SAAAC,SAAA;IAAA,KACzCC,MAAM,GAAG,YAAY;EAAA;EAErBC,yBAAyBA,CAACC,QAAgB,EAAE;IAC1C,OAAO,IAAI,CAACC,GAAG,CAAY,IAAGD,QAAS,WAAU,CAAC;EACpD;EAEAE,4BAA4BA,CAACC,WAAmB,EAAEC,QAAkB,EAAE;IACpE,OAAO,IAAI,CAACH,GAAG,CACZ,yBAAwBE,WAAY,aAAYC,QAAS,EAC5D,CAAC;EACH;EAEAC,cAAcA,CACZC,IAGC,EACD;IACA,OAAO,IAAI,CAACC,IAAI,CAAW,SAAS,EAAED,IAAI,CAAC;EAC7C;EAEA,MAAME,uBAAuBA,CAACC,OAAe,EAAEC,SAAiB,EAAE;IAAA,IAAAC,SAAA;IAChE;IACA,MAAMC,GAAG,GAAG,MAAM,IAAI,CAACC,KAAK,CAAE,eAAcH,SAAU,EAAC,EAAE;MACvDI,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBR;MACF,CAAC;IACH,CAAC,CAAC;IAEF,MAAMS,OAAO,GAAG,IAAIC,WAAW,CAAC,CAAC;IACjC,MAAMC,MAAM,GAAGR,GAAG,aAAHA,GAAG,wBAAAD,SAAA,GAAHC,GAAG,CAAEG,IAAI,cAAAJ,SAAA,uBAATA,SAAA,CAAWU,SAAS,CAAC,CAAQ;IAE5C,OAAO,IAAI,EAAE;MACX,MAAM;QAAEC,KAAK;QAAEC;MAAK,CAAC,GAAG,MAAMH,MAAM,CAACI,IAAI,CAAC,CAAC;MAC3C,MAAMC,YAAY,GAAGP,OAAO,CAACQ,MAAM,CAACJ,KAAK,EAAE;QAAEK,MAAM,EAAE;MAAK,CAAC,CAAC;MAE5D,MAAMC,KAAK,GAAG,IAAIC,WAAW,CAAC,QAAQ,EAAE;QACtCC,MAAM,EAAEL;MACV,CAAC,CAAC;MAEFM,QAAQ,CAACC,aAAa,CAACJ,KAAK,CAAC;MAE7B,IAAIL,IAAI,EAAE;QACR,MAAMK,KAAK,GAAG,IAAIC,WAAW,CAAC,YAAY,CAAC;QAC3CE,QAAQ,CAACC,aAAa,CAACJ,KAAK,CAAC;QAC7B;MACF;IACF;EACF;AACF;AACA,MAAMK,gBAAgB,GAAG,IAAItC,gBAAgB,CAAC,CAAC;AAC/C,eAAesC,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}