{"ast":null,"code":"var _jsxFileName = \"/Users/sagisimchi/Documents/GitHub/dent2-client/src/components/keywords/KeywordsSuggestions.tsx\",\n  _s = $RefreshSig$();\nimport { useParams } from \"react-router\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport styled from \"styled-components\";\nimport { suggestedKeywordsState } from \"../../state/suggestedKeywordsState\";\nimport { workerState } from \"../../state/workerState\";\nimport Link from \"../common/Link\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SuggestedKeyword = styled(Link)`\n  color: #741fff;\n  padding: 4px;\n  padding-inline: 6px;\n`;\n_c = SuggestedKeyword;\nconst SuggestionsKeywords = _ref => {\n  _s();\n  let {\n    onClickKeyword\n  } = _ref;\n  const {\n    websiteId\n  } = useParams();\n  const worker = useRecoilValue(workerState(websiteId));\n  const [suggestedKeywords, setSuggestedKeywords] = useRecoilState(suggestedKeywordsState(worker.id));\n  const onClick = keyword => {\n    const sg = suggestedKeywords === null || suggestedKeywords === void 0 ? void 0 : suggestedKeywords.filter(k => k !== keyword);\n    setSuggestedKeywords(sg);\n    onClickKeyword(keyword);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: suggestedKeywords === null || suggestedKeywords === void 0 ? void 0 : suggestedKeywords.map((suggestedKeyword, index) => /*#__PURE__*/_jsxDEV(SuggestedKeyword, {\n      onClick: () => onClick(suggestedKeyword),\n      children: [\"+ \", suggestedKeyword]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n};\n_s(SuggestionsKeywords, \"wnp8sv4f/4w2et+DTC8XtmPcBPw=\", false, function () {\n  return [useParams, useRecoilValue, useRecoilState];\n});\n_c2 = SuggestionsKeywords;\nexport default SuggestionsKeywords;\nvar _c, _c2;\n$RefreshReg$(_c, \"SuggestedKeyword\");\n$RefreshReg$(_c2, \"SuggestionsKeywords\");","map":{"version":3,"names":["useParams","useRecoilState","useRecoilValue","styled","suggestedKeywordsState","workerState","Link","jsxDEV","_jsxDEV","Fragment","_Fragment","SuggestedKeyword","_c","SuggestionsKeywords","_ref","_s","onClickKeyword","websiteId","worker","suggestedKeywords","setSuggestedKeywords","id","onClick","keyword","sg","filter","k","children","map","suggestedKeyword","index","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/sagisimchi/Documents/GitHub/dent2-client/src/components/keywords/KeywordsSuggestions.tsx"],"sourcesContent":["import { useParams } from \"react-router\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport styled from \"styled-components\";\nimport { suggestedKeywordsState } from \"../../state/suggestedKeywordsState\";\nimport { workerState } from \"../../state/workerState\";\nimport Link from \"../common/Link\";\n\nconst SuggestedKeyword = styled(Link)`\n  color: #741fff;\n  padding: 4px;\n  padding-inline: 6px;\n`;\n\ninterface Props {\n  onClickKeyword: (keyword: string) => void;\n}\n\nconst SuggestionsKeywords: React.FC<Props> = ({ onClickKeyword }) => {\n  const { websiteId } = useParams();\n  const worker = useRecoilValue(workerState(websiteId as string));\n  const [suggestedKeywords, setSuggestedKeywords] = useRecoilState(\n    suggestedKeywordsState(worker.id)\n  );\n\n  const onClick = (keyword: string) => {\n    const sg = suggestedKeywords?.filter((k) => k !== keyword);\n    setSuggestedKeywords(sg);\n    onClickKeyword(keyword);\n  };\n\n  return (\n    <>\n      {suggestedKeywords?.map((suggestedKeyword,index) => (\n        <SuggestedKeyword key={index} onClick={() => onClick(suggestedKeyword)}>\n          + {suggestedKeyword}\n        </SuggestedKeyword>\n      ))}\n    </>\n  );\n};\n\nexport default SuggestionsKeywords;\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,cAAc;AACxC,SAASC,cAAc,EAAEC,cAAc,QAAQ,QAAQ;AACvD,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,sBAAsB,QAAQ,oCAAoC;AAC3E,SAASC,WAAW,QAAQ,yBAAyB;AACrD,OAAOC,IAAI,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElC,MAAMC,gBAAgB,GAAGR,MAAM,CAACG,IAAI,CAAE;AACtC;AACA;AACA;AACA,CAAC;AAACM,EAAA,GAJID,gBAAgB;AAUtB,MAAME,mBAAoC,GAAGC,IAAA,IAAwB;EAAAC,EAAA;EAAA,IAAvB;IAAEC;EAAe,CAAC,GAAAF,IAAA;EAC9D,MAAM;IAAEG;EAAU,CAAC,GAAGjB,SAAS,CAAC,CAAC;EACjC,MAAMkB,MAAM,GAAGhB,cAAc,CAACG,WAAW,CAACY,SAAmB,CAAC,CAAC;EAC/D,MAAM,CAACE,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGnB,cAAc,CAC9DG,sBAAsB,CAACc,MAAM,CAACG,EAAE,CAClC,CAAC;EAED,MAAMC,OAAO,GAAIC,OAAe,IAAK;IACnC,MAAMC,EAAE,GAAGL,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEM,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAKH,OAAO,CAAC;IAC1DH,oBAAoB,CAACI,EAAE,CAAC;IACxBR,cAAc,CAACO,OAAO,CAAC;EACzB,CAAC;EAED,oBACEf,OAAA,CAAAE,SAAA;IAAAiB,QAAA,EACGR,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAES,GAAG,CAAC,CAACC,gBAAgB,EAACC,KAAK,kBAC7CtB,OAAA,CAACG,gBAAgB;MAAaW,OAAO,EAAEA,CAAA,KAAMA,OAAO,CAACO,gBAAgB,CAAE;MAAAF,QAAA,GAAC,IACpE,EAACE,gBAAgB;IAAA,GADEC,KAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEV,CACnB;EAAC,gBACF,CAAC;AAEP,CAAC;AAACnB,EAAA,CAtBIF,mBAAoC;EAAA,QAClBb,SAAS,EAChBE,cAAc,EACqBD,cAAc;AAAA;AAAAkC,GAAA,GAH5DtB,mBAAoC;AAwB1C,eAAeA,mBAAmB;AAAC,IAAAD,EAAA,EAAAuB,GAAA;AAAAC,YAAA,CAAAxB,EAAA;AAAAwB,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}