{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useMemo, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { TimeAgo } from \"../../components/website/analytics/types/timeAgo\";\nimport { useRecoilValue } from \"recoil\";\nimport { reportDataState } from \"../../state/reportDataState\";\nimport { Theme } from \"../../core/theme/theme\";\nfunction useGa4Report() {\n  _s();\n  const {\n    websiteId\n  } = useParams();\n  const [daysAgo, setDaysAgo] = useState(TimeAgo.MONTHAGO);\n  const reportData = useRecoilValue(reportDataState({\n    websiteId: websiteId,\n    daysAgo: daysAgo\n  }));\n  const convertToDashboardData = entries => {\n    const metrics = [\"screenPageViews\", \"userEngagementDuration\", \"eventCount\"];\n    return metrics.map((metric, index) => ({\n      metric,\n      label: metric,\n      data: {\n        labels: entries.map(entry => entry.label.slice(0, 15) + \"...\"),\n        datasets: [{\n          label: metric,\n          data: entries.map(entry => ({\n            x: entry.label.slice(0, 15) + \"...\",\n            y: entry.data[metric],\n            id: entry.articleId\n          })),\n          backgroundColor: [Theme.colors.purpleOpacity, Theme.colors.yellowOpacity, Theme.colors.lightBlueOpacity][index],\n          borderColor: [Theme.colors.purple, Theme.colors.yellow, Theme.colors.lightBlue][index],\n          borderWidth: 1\n        }]\n      }\n    }));\n  };\n  const dashboard = useMemo(() => convertToDashboardData(reportData), [reportData]);\n  return {\n    dashboard,\n    setDaysAgo,\n    daysAgo\n  };\n}\n_s(useGa4Report, \"skLSM0EfXgzTGvSelBRET3thE1E=\", false, function () {\n  return [useParams, useRecoilValue];\n});\nexport default useGa4Report;","map":{"version":3,"names":["useMemo","useState","useParams","TimeAgo","useRecoilValue","reportDataState","Theme","useGa4Report","_s","websiteId","daysAgo","setDaysAgo","MONTHAGO","reportData","convertToDashboardData","entries","metrics","map","metric","index","label","data","labels","entry","slice","datasets","x","y","id","articleId","backgroundColor","colors","purpleOpacity","yellowOpacity","lightBlueOpacity","borderColor","purple","yellow","lightBlue","borderWidth","dashboard"],"sources":["/Users/sagisimchi/Documents/GitHub/dent2-client/src/hooks/analytics/useGa4Report.tsx"],"sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { DashboardDataEntry } from \"../../components/website/analytics/types/dashboardData\";\nimport { ArticleAnalyticsValue } from \"../../components/website/analytics/types/articleAnalyticsValue\";\nimport { TimeAgo } from \"../../components/website/analytics/types/timeAgo\";\nimport { useRecoilValue } from \"recoil\";\nimport { reportDataState } from \"../../state/reportDataState\";\nimport { Theme } from \"../../core/theme/theme\";\n\nfunction useGa4Report() {\n  const { websiteId } = useParams();\n  const [daysAgo, setDaysAgo] = useState<TimeAgo>(TimeAgo.MONTHAGO);\n  const reportData = useRecoilValue(\n    reportDataState({ websiteId: websiteId as string, daysAgo: daysAgo })\n  );\n\n  const convertToDashboardData = (entries: ArticleAnalyticsValue[]): any[] => {\n    const metrics: (keyof ArticleAnalyticsValue[\"data\"])[] = [\n      \"screenPageViews\",\n      \"userEngagementDuration\",\n      \"eventCount\",\n    ];\n    return metrics.map((metric, index) => ({\n      metric,\n      label: metric,\n      data: {\n        labels: entries.map((entry) => entry.label.slice(0, 15) + \"...\"),\n        datasets: [\n          {\n            label: metric,\n            data: entries.map((entry) => ({\n              x: entry.label.slice(0, 15) + \"...\",\n              y: entry.data[metric],\n              id: entry.articleId,\n            })),\n            backgroundColor: [\n              Theme.colors.purpleOpacity,\n              Theme.colors.yellowOpacity,\n              Theme.colors.lightBlueOpacity,\n            ][index],\n            borderColor: [\n              Theme.colors.purple,\n              Theme.colors.yellow,\n              Theme.colors.lightBlue,\n            ][index],\n            borderWidth: 1,\n          },\n        ],\n      },\n    }));\n  };\n\n  const dashboard = useMemo(\n    () => convertToDashboardData(reportData),\n    [reportData]\n  );\n\n  return { dashboard, setDaysAgo, daysAgo };\n}\nexport default useGa4Report;\n"],"mappings":";AAAA,SAAoBA,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AACpD,SAASC,SAAS,QAAQ,cAAc;AAGxC,SAASC,OAAO,QAAQ,kDAAkD;AAC1E,SAASC,cAAc,QAAQ,QAAQ;AACvC,SAASC,eAAe,QAAQ,6BAA6B;AAC7D,SAASC,KAAK,QAAQ,wBAAwB;AAE9C,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM;IAAEC;EAAU,CAAC,GAAGP,SAAS,CAAC,CAAC;EACjC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAUE,OAAO,CAACS,QAAQ,CAAC;EACjE,MAAMC,UAAU,GAAGT,cAAc,CAC/BC,eAAe,CAAC;IAAEI,SAAS,EAAEA,SAAmB;IAAEC,OAAO,EAAEA;EAAQ,CAAC,CACtE,CAAC;EAED,MAAMI,sBAAsB,GAAIC,OAAgC,IAAY;IAC1E,MAAMC,OAAgD,GAAG,CACvD,iBAAiB,EACjB,wBAAwB,EACxB,YAAY,CACb;IACD,OAAOA,OAAO,CAACC,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,MAAM;MACrCD,MAAM;MACNE,KAAK,EAAEF,MAAM;MACbG,IAAI,EAAE;QACJC,MAAM,EAAEP,OAAO,CAACE,GAAG,CAAEM,KAAK,IAAKA,KAAK,CAACH,KAAK,CAACI,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;QAChEC,QAAQ,EAAE,CACR;UACEL,KAAK,EAAEF,MAAM;UACbG,IAAI,EAAEN,OAAO,CAACE,GAAG,CAAEM,KAAK,KAAM;YAC5BG,CAAC,EAAEH,KAAK,CAACH,KAAK,CAACI,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK;YACnCG,CAAC,EAAEJ,KAAK,CAACF,IAAI,CAACH,MAAM,CAAC;YACrBU,EAAE,EAAEL,KAAK,CAACM;UACZ,CAAC,CAAC,CAAC;UACHC,eAAe,EAAE,CACfxB,KAAK,CAACyB,MAAM,CAACC,aAAa,EAC1B1B,KAAK,CAACyB,MAAM,CAACE,aAAa,EAC1B3B,KAAK,CAACyB,MAAM,CAACG,gBAAgB,CAC9B,CAACf,KAAK,CAAC;UACRgB,WAAW,EAAE,CACX7B,KAAK,CAACyB,MAAM,CAACK,MAAM,EACnB9B,KAAK,CAACyB,MAAM,CAACM,MAAM,EACnB/B,KAAK,CAACyB,MAAM,CAACO,SAAS,CACvB,CAACnB,KAAK,CAAC;UACRoB,WAAW,EAAE;QACf,CAAC;MAEL;IACF,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMC,SAAS,GAAGxC,OAAO,CACvB,MAAMc,sBAAsB,CAACD,UAAU,CAAC,EACxC,CAACA,UAAU,CACb,CAAC;EAED,OAAO;IAAE2B,SAAS;IAAE7B,UAAU;IAAED;EAAQ,CAAC;AAC3C;AAACF,EAAA,CAjDQD,YAAY;EAAA,QACGL,SAAS,EAEZE,cAAc;AAAA;AA+CnC,eAAeG,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}